12/10

-- 복합 쿼리 - SET 연산자이용
--집합 연산자 : 집합 연산자는 둘 이상의 구성요소QUERY결과를 하나의 결과로 조합
--집합 연산자가 포함된 QUERY를 복합쿼리라 한다
--
--종류 UNION, UNION ALL, INTERSECT, MINUS(SET OPERATOR)
--
--집합 연산자는 모두 우선순위가 같음
--SQL문에 여러개의 집합연산자가 포함되어 있으면 오라클서버는 괄호가 명시적으로 다른 순서를 지정하지 않는 한 왼쪽에서 오른쪽으로 연산자를 평가
--다른 집합연산자와 함께 INTERSECT연산자가 사용된 QUERY에서는 괄호를 사용하여 평가 순서를 명시적으로 지정해야한다
--
--집합연산자 지침
-- SELECT리스트의 표션식은 개수가 일치해야함
-- 두번째 QUERY에 있는 각열의 데이터유형은 첫번째 QUERY에 있는 상응하는 열의 데이터 유형과 일치해야함
-- 실행순서를 변경하려면 괄호를 사용
-- ORDER BY절은 명령문의 맨 끝에만 올 수 있다.

-- 복합쿼리 : SET 연산자가 포함되어 있는 쿼리문

-- UNION (합집합)
--    두 테이블 결합, 결합시키는 두 테이블의 중복되지 않은 값들을 반환
    
SELECT DEPTNO FROM EMP
UNION
SELECT DEPTNO FROM DEPT;

SELECT EMPNO FROM EMP
UNION
SELECT DEPTNO FROM DEPT;

-- UNION ALL : 중복을 포함하는 합집합
--    UNION과 같으나 중복을 포함하여 값을 반환

SELECT DEPTNO FROM EMP
UNION ALL
SELECT DEPTNO FROM DEPT;

SELECT EMPNO FROM EMP
UNION ALL
SELECT DEPTNO FROM DEPT;

-- INTERSECT : 교집합
--    두 행의 집합 중 공통된 행을 반환

SELECT DEPTNO FROM EMP
INTERSECT
SELECT DEPTNO FROM DEPT;

SELECT EMPNO FROM EMP
INTERSECT
SELECT DEPTNO FROM DEPT;

-- MINUS : 차집합
--    첫번째 SELECT문에 의해 반환되는 행 중에서 두번째 SELECT문에 의해 반환되는 행에
--    존재하지 않는 행들을 반환

SELECT DEPTNO FROM DEPT
MINUS
SELECT DEPTNO FROM EMP;

-- 주의사항
--    두 SELECT문의 컬럼갯수 데이터유형이 일치하지 않을 경우 에러가 발생
SELECT DEPTNO, HIREDATE FROM EMP
UNION
SELECT DEPTNO, LOC FROM DEPT;

-- 해결방법 1) 변환함수를 사용하여 에러 해결 - 권장X
SELECT DEPTNO, TO_CHAR(NULL) "LOC", HIREDATE 
FROM EMP
UNION
SELECT DEPTNO, LOC, TO_DATE(NULL)
FROM DEPT;

-- 해결방법 2) NULL 키워드 사용 - 권장X
SELECT DEPTNO, NULL "LOC", HIREDATE
FROM EMP
UNION
SELECT DEPTNO, LOC, NULL
FROM DEPT;

-- 해결방법 3) 적절한 상수를 이용하여 에러 해결
SELECT EMPNO, SAL, COMM, ENAME
FROM EMP
UNION
SELECT DEPTNO, 0, 0, 'HI'
FROM DEPT;









12/10 DML

--[DML (Data Manipulation Language) : 데이터 조작어]
--    테이블에 새 행 추가
--    테이블에 기존 행 수정
--    테이블에서 기존 행 삭제

--    cf) 트랜잭션은 논리적 작업단위를 형성하는 DML문의 모음

-- INSERT 구문 (행 삽입)


--       1) 새 행 삽입
--    INSERT INTO 테이블명 VALUES 삽입할 데이터;

INSERT INTO DEPT
VALUES (50, 'A','B');

SELECT * FROM DEPT; --삽입된 데이터 확인

--       2) NULL값을 가진 행을 삽입

--    2-1 암시적 : 열 리스트에서 열을 생략
INSERT INTO DEPT(DEPTNO, DNAME)
VALUES (60, 'C');

SELECT * FROM DEPT; --삽입된 데이터 확인

--    2-2 명시적 : VALUES 절에서 NULL 키워드를 지정
INSERT INTO DEPT
VALUES (70,'D',NULL);

SELECT * FROM DEPT; --삽입된 데이터 확인

--      3) 특수값 삽입 : 함수 사용 가능
INSERT INTO EMP (EMPNO, HIREDATE)
VALUES (9090, SYSDATE);

SELECT * FROM EMP WHERE EMPNO = 9090;

SELECT CURRENT_DATE FROM DUAL;

--SYSDATE : 시스템에서의 현재 시간을 반환
--CURRENT_DATE : 현재 세션에서의 현재 시간을 반환

SELECT SESSIONTIMEZONE, CURRENT_DATE FROM DUAL;

ALTER SESSION SET NLS_DATE_FORMAT = 'DD-MON-YYYY HH24:MI:SS';
ALTER SESSION SET TIME_ZONE = '-5:0';

SELECT SESSIONTIMEZONE, CURRENT_DATE FROM DUAL; --변경사항 확인

--        4) 특정 날짜 및 시간을 삽입 : 변환함수 
ALTER SESSION SET NLS_LANGUAGE = 'AMERICAN';
ALTER SESSION SET NLS_DATE_FORMAT = 'DD-MON-RR';

INSERT INTO EMP(EMPNO, HIREDATE)
VALUES (9091,SYSDATE);

SELECT * FROM EMP WHERE EMPNO = 9091; -- 삽입, 변경 확인

INSERT INTO EMP(EMPNO, HIREDATE)
VALUES (9092, TO_DATE(SYSDATE, 'DD-MON-RR'));

SELECT * FROM EMP WHERE EMPNO = 9092; -- 삽입, 변경 확인

SELECT * FROM EMP;

ALTER SESSION SET NLS_DATE_FORMAT = 'RR/MM/DD'; -- 역순으로 다시 되돌리기
ALTER SESSION SET NLS_LANGUAGE = 'KOREAN';      -- 역순으로 다시 되돌리기

SELECT * FROM EMP;

DELETE FROM EMP WHERE EMPNO IN (9090,9091,9092); -- 삭제구문

SELECT * FROM EMP; -- 삭제 확인

--        5) 스크립트 작성
--    SQL문에 &치환을 사용하여 값을 입력하도록 요규
--    & : 변수 값에 대한 위치 표시자

SELECT * FROM DEPT; -- 삽입 전 확인
INSERT INTO DEPT (DEPTNO, DNAME, LOC)
VALUES (&DEPTNO, '&DNAME', '&LOC');
SELECT * FROM DEPT; -- 삽입 후 확인

--        6) 다른 테이블에서 행 복사
INSERT INTO DEPT(DEPTNO)
    SELECT GRADE FROM SALGRADE
    WHERE GRADE = 1;

SELECT * FROM DEPT; --삽입 후 확인


-- UPDATE 구문 (데이터 변경)


--        1) 테이블 행 갱신
--    데이터 제한이 중요함(WHERE절)
    WHERE절 X : 모든 행 갱신
    WHERE절 O : 특정 행 갱신
SELECT * FROM DEPT; -- 변경 전 확인
UPDATE DEPT
SET DNAME = 'G'
WHERE DEPTNO = 60;
SELECT * FROM DEPT; -- 변경 후 확인

--        2) 서브쿼리를 사용하여 여러 열 갱신
-- EX) 7900사원의 직책과 급여를 동시에 갱신 -> 7521사원의 직책과 급여로 갱신
SELECT * FROM EMP; -- 변경 전 확인 (JOB : CLERK / SAL : 950)
UPDATE EMP
SET JOB = (
            SELECT JOB
            FROM EMP
            WHERE EMPNO = 7521
            ),
    SAL = (
            SELECT SAL
            FROM EMP
            WHERE EMPNO = 7521
            )
WHERE EMPNO = 7900;
SELECT * FROM EMP; -- 변경 후 확인 (JOB : SALESMAN / SAL : 1250)

--문제 : EMP테이블에서 사번이 7499인 사원과 동일한 직책을 가진 사원들의 SAL값을 
--        7902사원의 MGR값으로 변경하시오.
UPDATE EMP
SET SAL = (
            SELECT MGR
            FROM EMP
            WHERE EMPNO = 7902
            )
WHERE JOB IN(
                SELECT JOB
                FROM EMP
                WHERE EMPNO = 7499
                );

SELECT * FROM EMP; --롤백 전 확인

ROLLBACK; --롤백
SELECT * FROM EMP; --롤백 후 확인
SELECT * FROM DEPT;

--        3) 다른 테이블을 기반으로 행 갱신
CREATE TABLE COPY_EMP
AS
SELECT * FROM EMP;

SELECT * FROM COPY_EMP;

-- EMP테이블을 기반으로 사원번호가 7934인 사원의 직책과 동일 부서번호를 가지고있는
-- 모든 사원의 부서번호를 현재 7902사원의 부서번호로 모두 변경해라.
UPDATE COPY_EMP
SET DEPTNO = (
                SELECT DEPTNO
                FROM EMP
                WHERE EMPNO = 7902
                )
WHERE JOB = (
                SELECT JOB
                FROM EMP
                WHERE EMPNO = 7934
                );                

SELECT * FROM COPY_EMP;
SELECT * FROM EMP;

--문제 : EMP테이블을 기반으로 사원번호가 7934인 사원의 매니저와 동일한 부서번호를 가지고 있는
--      모든 사원의 부서번호를 현재 COPY_EMP 7902사원의 부서번호로 모두 변경하시오
UPDATE COPY_EMP
SET DEPTNO = (
                SELECT DEPTNO
                FROM COPY_EMP
                WHERE EMPNO = 7902
                )
WHERE DEPTNO = (
                SELECT DEPTNO
                FROM EMP
                WHERE EMPNO =(
                            SELECT MGR
                            FROM EMP
                            WHERE EMPNO = 7934
                            )
                );
SELECT * FROM COPY_EMP;

--    DELETE 구문 : 행 제거

--        1) 테이블에서 행 삭제
--    WHERE 절 X : 테이블의 모든 행 삭제
--    WHERE 절 O : 특정 행 삭제
--    DELETE 구문은 예외적으로 FROM 생략 가능

--        2) 다른 테이블을 기반으로 행 삭제 가능
DELETE FROM COPY_EMP
WHERE DEPTNO = (
                SELECT DEPTNO
                FROM DEPT
                WHERE DNAME = 'RESEARCH'
                );
SELECT * FROM COPY_EMP;
ROLLBACK;

--        CF) TRUNCATE(DDL문)
--    테이블의 구조는 그대로 남겨둔 채 모든 행 제거
--    단 롤백이 불가능하므로 조심해서 사용할 것
--    TRUNCATE TABLE 테이블명 



--TCL (Transaction Control Language) : 트랜잭션 제어문
--    oracle서버는 트랜잭션에 준하여 데이터 일관성이 유지되도록 한다. 트랜잭션은
--    데이터를 변경할 때 많은 유연성과 제어기능을 제공하며 
--    유저 프로세스failure 또는 시스템failure시 데이터 일관성을 보장한다.
    
--    1) 트랜잭션 시작과 종료
--    트랜잭션은 첫번째 DML문을 만나면 시작되고 다음상황 중 하나가 발생시 종료됨
--    
--    COMMIT또는 ROLLLBACK문 수행
--    CREATE같은 DDL문 수행
--    유저가 SQL Developer 또는 SQL*Plus를 종료
--    시스템 failure 또는 시스템 중단
--    
--    한 트랜잭션이 끝나면 다음 실행가능한 SQL문이 다음 트랜잭션을 자동으로 시작함
--    DDL문 또는 DCL문은 자동으로 커밋되기때문에 트랜잭션을 암시적으로 종료함

--    트랜잭션은 논리적 작업단위를 형성하는 DML문의 모음

--    2) 명시적 트랜잭션 제어문
--    i) COMMIT : COMMIT은 보류중인 모든 데이터 변경 사항을 영구적으로 적용하여
--                현재 트랜잭션을 종료함
--    ii) SAVAPOINT name : SAVEPOINT name은 현재 트랜잭션 내에 저장점을 표시함
--    iii) ROLLBACK : ROLLBACK은 보류중인 모든 데이터 변경사항을 폐기하여 현재 트랜잭션을 종료함











12/10 TCL

--TCL (Transaction Control Language) : 트랜잭션 제어문
--    oracle서버는 트랜잭션에 준하여 데이터 일관성이 유지되도록 한다. 트랜잭션은
--    데이터를 변경할 때 많은 유연성과 제어기능을 제공하며 
--    유저 프로세스failure 또는 시스템failure시 데이터 일관성을 보장한다.
    
--    1) 트랜잭션 시작과 종료
--    트랜잭션은 첫번째 DML문을 만나면 시작되고 다음상황 중 하나가 발생시 종료됨
--    
--    COMMIT또는 ROLLLBACK문 수행
--    CREATE같은 DDL문 수행
--    유저가 SQL Developer 또는 SQL*Plus를 종료
--    시스템 failure 또는 시스템 중단
--    
--    한 트랜잭션이 끝나면 다음 실행가능한 SQL문이 다음 트랜잭션을 자동으로 시작함
--    DDL문 또는 DCL문은 자동으로 커밋되기때문에 트랜잭션을 암시적으로 종료함

--    트랜잭션은 논리적 작업단위를 형성하는 DML문의 모음

--    2) 명시적 트랜잭션 제어문
--    i) COMMIT : COMMIT은 보류중인 모든 데이터 변경 사항을 영구적으로 적용하여
--                현재 트랜잭션을 종료함
--    ii) SAVAPOINT name : SAVEPOINT name은 현재 트랜잭션 내에 저장점을 표시함
--    iii) ROLLBACK : ROLLBACK은 보류중인 모든 데이터 변경사항을 폐기하여 현재 트랜잭션을 종료함

--        [TCL (Transaction Control Language) 트랜잭션 제어문]
--    
--    COMMIT

SELECT * FROM DEPT;

DELETE FROM DEPT
WHERE DEPTNO = 50;

INSERT INTO DEPT
VALUES (80,'COMMIT','DEPT');

COMMIT;

SELECT * FROM DEPT;

DELETE FROM DEPT
WHERE DEPTNO = 60;

ROLLBACK;
SELECT * FROM DEPT;

--SAVEPOINT 

SELECT * FROM COPY_EMP;

DELETE COPY_EMP
WHERE EMPNO = 7934; -- DML문이 시작되면서 트랜잭션도 시작됨

SAVEPOINT DEL_COPY_EMP;   -- SAVEPOINT 이름을 지을때 유의미하게 지어서 혼동이없도록 할 것!

DELETE COPY_EMP
WHERE EMPNO = 7902;

SAVEPOINT DEL2_COPY_EMP;

INSERT INTO COPY_EMP(EMPNO)
VALUES (9990);

SAVEPOINT INSERT_COPY_EMP;

INSERT INTO COPY_EMP(EMPNO)
VALUES (9991);

SELECT * FROM COPY_EMP;

ROLLBACK TO INSERT_COPY_EMP; -- 지정한 SAVEPOINT로 롤백시킴

SELECT * FROM COPY_EMP; -- 출력 결과 9991 삽입 전으로 ROLLBACK 했으므로, 9990까지 출력됨

ROLLBACK TO DEL2_COPY_EMP;
SELECT * FROM COPY_EMP;

ROLLBACK; -- 전체 롤백
SELECT * FROM COPY_EMP; -- 전체 롤백 시 모든 저장점 SAVEPOINT가 모두 사라진다.


12/10

- 문자를 저장하는 타입

1. CHAR : 고정형 문자
2. VARCHAR2 : 가변형 문자 (VARCHER 개량형)
3. VARCHAR : 가변형 문자 -> 지금은 ORACLE이 자체적으로 2로 바꿔준다.

EX) 
CHAR(8) :  | A | B | C |  |  |  |  |  | 
고정형 문자열 장점 : READ 할 때 효율적
고정형 문자열 단점 : 공간 사용이 비효율적

VARCHAR2(8) : | A | B | C |
가변형 문자열 장점 : 공간 사용 효율적
가변형 문자열 단점 : READ 할 때 비효율적
최대 4000자까지 가능

CF) 주민등록번호, 휴대폰번호 같은 숫자를 데이터 입력받을때는 보통 문자로 받고 폭이 정해져있으므로
고정형 CHAR 사용이 효율적

